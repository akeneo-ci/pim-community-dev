#!groovy

import org.csanchez.jenkins.plugins.kubernetes.pipeline.PodTemplateAction

String[] editions = ["ce"]
String[] features = ["features"]
String launchUnitTests = "yes"
String launchIntegrationTests = "yes"
String launchBehatTests = "yes"
String verboseOutputs = "yes"
String dotsPerLine = "50"
String tag = "eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}"

stage("Build") {
    milestone 1
    if (env.BRANCH_NAME =~ /^PR-/) {
        timeout(time:5, unit:'DAYS') {
            userInput = input(message: 'Launch tests?', parameters: [
                choice(choices: 'yes\nno', description: 'Run unit tests and code style checks', name: 'launchUnitTests'),
                choice(choices: 'yes\nno', description: 'Run integration tests', name: 'launchIntegrationTests'),
                choice(choices: 'yes\nno', description: 'Run behat tests', name: 'launchBehatTests'),
                choice(choices: 'no\nyes', description: 'Enable Verbose mode', name: 'verboseOutputs'),
                string(defaultValue: '50', description: 'Number of dots per line', name: 'dotsperline'),
                string(defaultValue: 'ee,ce', description: 'PIM edition the behat tests should run on (comma separated values)', name: 'editions'),
                string(defaultValue: 'features,vendor/akeneo/pim-community-dev/features', description: 'Behat scenarios to build', name: 'features'),
            ])

            editions = userInput['editions'].tokenize(',')
            features = userInput['features'].tokenize(',')
            launchUnitTests = userInput['launchUnitTests']
            launchIntegrationTests = userInput['launchIntegrationTests']
            launchBehatTests = userInput['launchBehatTests']
            verboseOutputs = userInput['verboseOutputs']
            dotsPerLine = userInput['dotsperline']
        }
    }
    milestone 2

    withCredentials([string(credentialsId: 'composer-token', variable: 'token')]) {
        pod(label: "build", containers: [
            containerTemplate(name: "docker", image: "paulwoelfel/docker-gcloud:v1.13", ttyEnabled: true, command: 'cat', resourceRequestCpu: '100m', resourceRequestMemory: '200Mi')
        ]) {
            parallel(
                "pim-ce": {
                    checkout scm
                    sh "gcloud container builds submit --tag ${tag}-ce --substitutions _COMPOSER_TOKEN=${token} ."
                },
                "pim-ee": {
                    if (editions.contains("ee")) {
                        checkout([$class: 'GitSCM',
                            branches: [[name: 'master']],
                            userRemoteConfigs: [[credentialsId: 'github-credentials', url: 'https://github.com/akeneo/pim-enterprise-dev.git']]
                        ])

                        dir('vendor/akeneo/pim-community-dev') {
                            checkout scm
                        }

                        sh "gcloud container builds submit --tag ${tag}-ee --substitutions _COMPOSER_TOKEN=${token} ."
                    } else {
                        echo "Skipping Enterprise Edition matrix"
                    }
                }
            )
        }
    }
}

stage("Test") {
    parallel(
        "phpunit": {testif(
            condition: launchUnitTests.equals("yes")
            container: "${tag}-ce"
            script: "vendor/bin/phpunit -c app/phpunit.xml.dist --testsuite PIM_Unit_Test --log-junit ${env.WORKSPACE}/junit_output.xml"
            junit: "junit_output.xml"
        )},
        "phpspec": {testif(
            condition: launchUnitTests.equals("yes")
            container: "${tag}-ce"
            script: "su phpuser -c './vendor/bin/phpspec run --format=junit' > ${env.WORKSPACE}/junit_output.xml"
            junit: "junit_output.xml"
        )},
        "php-cs-fixer": {testif(
            condition: launchUnitTests.equals("yes")
            container: "${tag}-ce"
            script: "vendor/bin/php-cs-fixer fix --diff --dry-run --config=.php_cs.php --format=junit > ${env.WORKSPACE}/junit_output.xml"
            junit: "junit_output.xml"
        )},
        "grunt": {testif(
            condition: launchUnitTests.equals("yes")
            container: "${tag}-ce"
            script: "yarn run lint"
        )},
        "php-coupling-detector": {testif(
            condition: launchUnitTests.equals("yes")
            container: "${tag}-ce"
            script: "vendor/bin/php-coupling-detector detect --config-file=.php_cd.php src"
        },
        "phpunit-integration-ce": {
            queue(
                condition: launchIntegrationTests.equals("yes") && editions.contains("ce")
                verbose: (verboseOutputs == "yes")
                linesize: dotsPerLine
                container: "${tag}-ce"
            ) {
                def files = sh (returnStdout: true, script: 'find src tests -name "*Integration.php" -exec sh -c "grep -Ho \'function test\' {} | uniq -c"  \\; | sed "s/:function test//"').tokenize('\n')
                def messages = new net.sf.json.JSONArray()

                for (line in files) {
                    def file = line.tokenize(' ')
                    def message = new net.sf.json.JSONObject()
                    message.put("name",file[1])
                    message.put("commands",[
                        [
                            container: "php",
                            junit: [in: "/var/www/pim/", name: "junit_output.xml"],
                            script: "php -d error_reporting='E_ALL' vendor/bin/phpunit -c app/phpunit.xml.dist " + file[1] + " --log-junit junit_output.xml"
                        ]
                    ])
                    messages.add(message)
                }

                return messages
            }
        },
        "behat-ce": {
            queue(
                condition: launchIntegrationTests.equals("yes") && editions.contains("ce")
                verbose: (verboseOutputs == "yes")
                linesize: dotsPerLine
                container: "${tag}-ce"
            ) {
                def scenarios = sh (returnStdout: true, script: "vendor/bin/behat --list-scenarios").tokenize('\n')
                def messages = new net.sf.json.JSONArray()

                for (scenario in scenarios) {
                    def message = new net.sf.json.JSONObject()
                    message.put("name",scenario)
                    message.put("commands",[
                        [
                            container: "php",
                            junit: [in: "/var/www/pim/app/build/logs/behat/", name: "*.xml"],
                            artifacts: [in: "/tmp/behat/screenshots", name: "*.png"],
                            script: "php vendor/bin/behat --strict -vv " + scenario
                        ]
                    ])
                    messages.add(message)
                }

                return messages
            }
        },
        "phpunit-integration-ee": {
            if (launchIntegrationTests.equals("yes") && editions.contains("ee")) {
                queue({
                    def files = sh (returnStdout: true, script: 'find src tests -name "*Integration.php" -exec sh -c "grep -Ho \'function test\' {} | uniq -c"  \\; | sed "s/:function test//"').tokenize('\n')
                    def messages = new net.sf.json.JSONArray()

                    for (line in files) {
                        def file = line.tokenize(' ')
                        def message = new net.sf.json.JSONObject()
                        message.put("name",file[1])
                        message.put("commands",[
                            [
                                container: "php",
                                junit: [in: "/var/www/pim/", name: "junit_output.xml"],
                                script: "php -d error_reporting='E_ALL' vendor/bin/phpunit -c app/phpunit.xml.dist --exclude-group ce" + file[1] + " --log-junit junit_output.xml"
                            ]
                        ])
                        messages.add(message)
                    }

                    return messages
                }, 10, "ee", verboseOutputs, dotsPerLine)
            } else {
                echo "Skipping integration test"
            }
        },
        "behat-ee": {
            if (launchBehatTests.equals("yes") && editions.contains("ee")) {
                queue({
                    def scenarios = sh (returnStdout: true, script: "cd /var/www/pim && php vendor/bin/behat --list-scenarios").tokenize('\n')
                    def messages = new net.sf.json.JSONArray()
                    for (scenario in scenarios) {
                        def message = new net.sf.json.JSONObject()
                        message.put("name",scenario)
                        message.put("commands",[
                            [
                                container: "php",
                                junit: [in: "/var/www/pim/app/build/logs/behat/", name: "*.xml"],
                                artifacts: [in: "/tmp/behat/screenshots", name: "*.png"],
                                script: "php vendor/bin/behat --strict -vv " + scenario
                            ]
                        ])
                        messages.add(message)
                    }

                    return messages
                }, 150, "ee", verboseOutputs, dotsPerLine)
            } else {
                echo "Skipping behat test"
            }
        }
    )
}
